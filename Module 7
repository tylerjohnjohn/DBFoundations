--*************************************************************************--
-- Title: Assignment07
-- Author: TJohnson
-- Desc: This file demonstrates how to use Functions
-- Change Log: When,Who,What
-- 2025-08-27,TJohnson,Created File
--**************************************************************************--
Begin Try
	Use Master;
	If Exists(Select Name From SysDatabases Where Name = 'Assignment07DB_TJohnson')
	 Begin 
	  Alter Database [Assignment07DB_TJohnson] set Single_user With Rollback Immediate;
	  Drop Database Assignment07DB_TJohnson;
	 End
	Create Database Assignment07DB_TJohnson;
End Try
Begin Catch
	Print Error_Number();
End Catch
go
Use Assignment07DB_TJohnson;

-- Create Tables (Module 01)-- 
Create Table Categories
([CategoryID] [int] IDENTITY(1,1) NOT NULL 
,[CategoryName] [nvarchar](100) NOT NULL
);
go

Create Table Products
([ProductID] [int] IDENTITY(1,1) NOT NULL 
,[ProductName] [nvarchar](100) NOT NULL 
,[CategoryID] [int] NULL  
,[UnitPrice] [money] NOT NULL
);
go

Create Table Employees -- New Table
([EmployeeID] [int] IDENTITY(1,1) NOT NULL 
,[EmployeeFirstName] [nvarchar](100) NOT NULL
,[EmployeeLastName] [nvarchar](100) NOT NULL 
,[ManagerID] [int] NULL  
);
go

Create Table Inventories
([InventoryID] [int] IDENTITY(1,1) NOT NULL
,[InventoryDate] [Date] NOT NULL
,[EmployeeID] [int] NOT NULL
,[ProductID] [int] NOT NULL
,[ReorderLevel] int NOT NULL -- New Column 
,[Count] [int] NOT NULL
);
go

-- Add Constraints (Module 02) -- 
Begin  -- Categories
	Alter Table Categories 
	 Add Constraint pkCategories 
	  Primary Key (CategoryId);

	Alter Table Categories 
	 Add Constraint ukCategories 
	  Unique (CategoryName);
End
go 

Begin -- Products
	Alter Table Products 
	 Add Constraint pkProducts 
	  Primary Key (ProductId);

	Alter Table Products 
	 Add Constraint ukProducts 
	  Unique (ProductName);

	Alter Table Products 
	 Add Constraint fkProductsToCategories 
	  Foreign Key (CategoryId) References Categories(CategoryId);

	Alter Table Products 
	 Add Constraint ckProductUnitPriceZeroOrHigher 
	  Check (UnitPrice >= 0);
End
go

Begin -- Employees
	Alter Table Employees
	 Add Constraint pkEmployees 
	  Primary Key (EmployeeId);

	Alter Table Employees 
	 Add Constraint fkEmployeesToEmployeesManager 
	  Foreign Key (ManagerId) References Employees(EmployeeId);
End
go

Begin -- Inventories
	Alter Table Inventories 
	 Add Constraint pkInventories 
	  Primary Key (InventoryId);

	Alter Table Inventories
	 Add Constraint dfInventoryDate
	  Default GetDate() For InventoryDate;

	Alter Table Inventories
	 Add Constraint fkInventoriesToProducts
	  Foreign Key (ProductId) References Products(ProductId);

	Alter Table Inventories 
	 Add Constraint ckInventoryCountZeroOrHigher 
	  Check ([Count] >= 0);

	Alter Table Inventories
	 Add Constraint fkInventoriesToEmployees
	  Foreign Key (EmployeeId) References Employees(EmployeeId);
End 
go

-- Adding Data (Module 04) -- 
Insert Into Categories 
(CategoryName)
Select CategoryName 
 From Northwind.dbo.Categories
 Order By CategoryID;
go

Insert Into Products
(ProductName, CategoryID, UnitPrice)
Select ProductName,CategoryID, UnitPrice 
 From Northwind.dbo.Products
  Order By ProductID;
go

Insert Into Employees
(EmployeeFirstName, EmployeeLastName, ManagerID)
Select E.FirstName, E.LastName, IsNull(E.ReportsTo, E.EmployeeID) 
 From Northwind.dbo.Employees as E
  Order By E.EmployeeID;
go

Insert Into Inventories
(InventoryDate, EmployeeID, ProductID, [Count], [ReorderLevel]) -- New column added this week
Select '20170101' as InventoryDate, 5 as EmployeeID, ProductID, UnitsInStock, ReorderLevel
From Northwind.dbo.Products
UNIOn
Select '20170201' as InventoryDate, 7 as EmployeeID, ProductID, UnitsInStock + 10, ReorderLevel -- Using this is to create a made up value
From Northwind.dbo.Products
UNIOn
Select '20170301' as InventoryDate, 9 as EmployeeID, ProductID, abs(UnitsInStock - 10), ReorderLevel -- Using this is to create a made up value
From Northwind.dbo.Products
Order By 1, 2
go


-- Adding Views (Module 06) -- 
Create View vCategories With SchemaBinding
 AS
  Select CategoryID, CategoryName From dbo.Categories;
go
Create View vProducts With SchemaBinding
 AS
  Select ProductID, ProductName, CategoryID, UnitPrice From dbo.Products;
go
Create View vEmployees With SchemaBinding
 AS
  Select EmployeeID, EmployeeFirstName, EmployeeLastName, ManagerID From dbo.Employees;
go
Create View vInventories With SchemaBinding 
 AS
  Select InventoryID, InventoryDate, EmployeeID, ProductID, ReorderLevel, [Count] From dbo.Inventories;
go

-- Show the Current data in the Categories, Products, and Inventories Tables
Select * From vCategories;
go
Select * From vProducts;
go
Select * From vEmployees;
go
Select * From vInventories;
go

/********************************* Questions and Answers *********************************/
Print
'NOTES------------------------------------------------------------------------------------ 
 1) You must use the BASIC views for each table.
 2) To make sure the Dates are sorted correctly, you can use Functions in the Order By clause!
------------------------------------------------------------------------------------------'
-- Question 1 (5% of pts):
-- Show a list of Product names and the price of each product.
-- Use a function to format the price as US dollars.
-- Order the result by the product name.

SELECT 
	ProductName, 
	FORMAT(UnitPrice, 'C', 'en-US') AS PriceUSD
FROM
	vProducts
ORDER BY
	ProductName;

go

-- Question 2 (10% of pts): 
-- Show a list of Category and Product names, and the price of each product.
-- Use a function to format the price as US dollars.
-- Order the result by the Category and Product.

SELECT 
C.CategoryName,
P.ProductName,
FORMAT(P.UnitPrice, 'C', 'en-US') AS PriceUSD
FROM vCategories AS c
INNER JOIN vProducts AS p
ON c.CategoryID=p.CategoryID
ORDER BY CategoryName, ProductName;

go

-- Question 3 (10% of pts): 
-- Use functions to show a list of Product names, each Inventory Date, and the Inventory Count.
-- Format the date like 'January, 2017'.
-- Order the results by the Product and Date.

SELECT
P.ProductName,
FORMAT(I.InventoryDate, 'MMMM, yyyy') AS InventoryDateFormatted,
I.[Count]
FROM vProducts AS P
INNER JOIN vInventories AS I
ON p.ProductID=i.ProductID
ORDER BY ProductName, InventoryDate;

go

-- Question 4 (10% of pts): 
-- CREATE A VIEW called vProductInventories. 
-- Shows a list of Product names, each Inventory Date, and the Inventory Count. 
-- Format the date like 'January, 2017'.
-- Order the results by the Product and Date.
go
CREATE OR ALTER VIEW dbo.vProductInventories
AS
	SELECT TOP 1000000
	P.ProductName,
	FORMAT(I.InventoryDate, 'MMMM, yyyy') AS InventoryDateFormatted,
	I.[Count]
	FROM vProducts AS P
	INNER JOIN vInventories AS I
	ON p.ProductID=i.ProductID
	ORDER BY ProductName, InventoryDate;
go
SELECT * FROM vProductInventories

go


-- Check that it works: Select * From vProductInventories;
go

-- Question 5 (10% of pts): 
-- CREATE A VIEW called vCategoryInventories. 
-- Shows a list of Category names, Inventory Dates, and a TOTAL Inventory Count BY CATEGORY
-- Format the date like 'January, 2017'.
-- Order the results by the Product and Date.

go
CREATE OR ALTER VIEW dbo.vCategoryInventories
AS
	SELECT TOP 1000000
	c.CategoryName,
	FORMAT(I.InventoryDate, 'MMMM, yyyy') AS InventoryDateFormatted,
	SUM(i.[Count]) AS InventoryCountbyCategory
	FROM vCategories as c
	INNER JOIN vProducts as p
	ON c.CategoryID=p.CategoryID
	INNER JOIN vInventories as i
	ON p.ProductID=i.ProductID
	GROUP BY 
	c.CategoryName, 
	i.InventoryDate	
	ORDER BY CategoryName, InventoryDate;
go
SELECT * FROM vCategoryInventories
go

-- Check that it works: Select * From vCategoryInventories;
go

-- Question 6 (10% of pts): 
-- CREATE ANOTHER VIEW called vProductInventoriesWithPreviouMonthCounts. 
-- Show a list of Product names, Inventory Dates, Inventory Count, AND the Previous Month Count.
-- Use functions to set any January NULL counts to zero. 
-- Order the results by the Product and Date. 
-- This new view must use your vProductInventories view.

GO
CREATE OR ALTER VIEW dbo.vProductInventoriesWithPreviousMonthCounts
AS
WITH V AS (
  SELECT
      v.ProductName,
      v.InventoryDateFormatted,
      v.[Count],
      -- Turn 'January, 2017' -> '2017-01-01'
      CAST('01 ' + REPLACE(v.InventoryDateFormatted, ',', '') AS date) AS InventoryDate
  FROM dbo.vProductInventories AS v
)
SELECT TOP 1000000
    ProductName,
    InventoryDateFormatted,
    [Count],
    IIF(
        MONTH(InventoryDate) = 1
        AND LAG([Count]) OVER (PARTITION BY ProductName ORDER BY InventoryDate) IS NULL,
        0,
        LAG([Count]) OVER (PARTITION BY ProductName ORDER BY InventoryDate)
    ) AS PreviousMonthCount
FROM V
ORDER BY ProductName, InventoryDate;
GO
Select * FROM vProductInventoriesWithPreviousMonthCounts
go

-- Check that it works: Select * From vProductInventoriesWithPreviousMonthCounts;
go

-- Question 7 (15% of pts): 
-- CREATE a VIEW called vProductInventoriesWithPreviousMonthCountsWithKPIs.
-- Show columns for the Product names, Inventory Dates, Inventory Count, Previous Month Count. 
-- The Previous Month Count is a KPI. The result can show only KPIs with a value of either 1, 0, or -1. 
-- Display months with increased counts as 1, same counts as 0, and decreased counts as -1. 
-- Varify that the results are ordered by the Product and Date.

GO
CREATE OR ALTER VIEW dbo.vProductInventoriesWithPreviousMonthCountsWithKPIs
AS
-- Rebuild a real date from 'January, 2017'
WITH V AS (
    SELECT
        v.ProductName,
        v.InventoryDateFormatted,
        v.[Count],
        CAST('01 ' + REPLACE(v.InventoryDateFormatted, ',', '') AS date) AS InventoryDate
    FROM dbo.vProductInventories AS v
),
WithPrev AS (
    SELECT
        ProductName,
        InventoryDate,
        InventoryDateFormatted,
        [Count],
        -- Per earlier prompt: if January has no previous month, treat it as 0
        IIF(
            MONTH(InventoryDate) = 1
            AND LAG([Count]) OVER (PARTITION BY ProductName ORDER BY InventoryDate) IS NULL,
            0,
            LAG([Count]) OVER (PARTITION BY ProductName ORDER BY InventoryDate)
        ) AS PreviousMonthCount
    FROM V
)
SELECT TOP 1000000
    ProductName,
    InventoryDateFormatted,
    [Count] AS InventoryCount,
    PreviousMonthCount,
    -- KPI: 1 = increased, 0 = same, -1 = decreased
    CASE
        WHEN [Count] > PreviousMonthCount THEN 1
        WHEN [Count] = PreviousMonthCount THEN 0
        ELSE -1
    END AS KPI
FROM WithPrev
ORDER BY ProductName, CAST('01 ' + REPLACE(InventoryDateFormatted, ',', '') AS date);
GO
SELECT * FROM vProductInventoriesWithPreviousMonthCountsWithKPIs

-- Important: This new view must use your vProductInventoriesWithPreviousMonthCounts view!
-- Check that it works: Select * From vProductInventoriesWithPreviousMonthCountsWithKPIs;
go

-- Question 8 (25% of pts): 
-- CREATE a User Defined Function (UDF) called fProductInventoriesWithPreviousMonthCountsWithKPIs.
-- Show columns for the Product names, Inventory Dates, Inventory Count, the Previous Month Count. 
-- The Previous Month Count is a KPI. The result can show only KPIs with a value of either 1, 0, or -1. 
-- Display months with increased counts as 1, same counts as 0, and decreased counts as -1. 
-- The function must use the ProductInventoriesWithPreviousMonthCountsWithKPIs view.
-- Varify that the results are ordered by the Product and Date.

GO
CREATE OR ALTER FUNCTION dbo.fProductInventoriesWithPreviousMonthCountsWithKPIs(@KPIFilter int = NULL)
RETURNS TABLE
AS
RETURN
(
    WITH X AS (
        SELECT
            v.ProductName,
            v.InventoryDateFormatted,
            v.InventoryCount,
            v.PreviousMonthCount,
            v.KPI,
            CAST('01 ' + REPLACE(v.InventoryDateFormatted, ',', '') AS date) AS SortDate
        FROM dbo.vProductInventoriesWithPreviousMonthCountsWithKPIs AS v
        WHERE v.KPI IN (-1, 0, 1)
		AND (@KPIFilter IS NULL OR v.KPI = @KPIFilter)

    )
    SELECT TOP 100000
        ProductName,
        InventoryDateFormatted,
        InventoryCount,
        PreviousMonthCount,
        KPI
    FROM X
    ORDER BY ProductName, SortDate
);

/* Check that it works:
Select * From fProductInventoriesWithPreviousMonthCountsWithKPIs(null); -- added for all
Select * From fProductInventoriesWithPreviousMonthCountsWithKPIs(1);
Select * From fProductInventoriesWithPreviousMonthCountsWithKPIs(0);
Select * From fProductInventoriesWithPreviousMonthCountsWithKPIs(-1);
*/
go

/***************************************************************************************/
